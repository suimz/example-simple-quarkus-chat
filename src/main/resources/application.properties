# 打包方式：fast-jar、uber-jar（完整的jar）、native（本地可执行文件）
quarkus.package.type=fast-jar
# 开启这个配置，将会使用本地docker将项目打包成Linux可执行文件
quarkus.native.container-build=true

quarkus.http.port=8080
quarkus.jackson.serialization-inclusion=non_null

# 生产环境数据源
quarkus.datasource.db-kind=mysql
quarkus.datasource.jdbc.url=jdbc:mysql://localhost:3306/quarkus
quarkus.datasource.username=username
quarkus.datasource.password=password
# 数据库连接池，保持活动的最少连接数
quarkus.datasource.jdbc.min-size=2
# 数据库连接池，最大连接数量
quarkus.datasource.jdbc.max-size=8
# JDBC操作时区
quarkus.hibernate-orm.jdbc.timezone=Asia/Shanghai

# 日志
quarkus.log.level=INFO
quarkus.log.file.enable=true
quarkus.log.file.async=true
quarkus.log.file.level=INFO
quarkus.log.file.path=/tmp/logs/app.log
# 单个备份日志文件大小上限
quarkus.log.file.rotation.max-file-size=10M
# 最大备份日志文件数
quarkus.log.file.rotation.max-backup-index=5

# JWT 认证
#######################################################################################################
# 用 OpenSSL生成 JWT 私钥，获得 publicKey.pem 和 privateKey.pem 文件
# > openssl genrsa -out rsaPrivateKey.pem 2048
# > openssl rsa -pubout -in rsaPrivateKey.pem -out publicKey.pem
# > openssl pkcs8 -topk8 -nocrypt -inform pem -in rsaPrivateKey.pem -outform pem -out privateKey.pem
#######################################################################################################
jwt.issuer=smz
# 发签↓
smallrye.jwt.sign.key.location=jwt/privateKey.pem
smallrye.jwt.new-token.issuer=https://example.com/issuer
smallrye.jwt.claims.sub=smz
# token有效时长（单位秒），15天
smallrye.jwt.new-token.lifespan=1296000
smallrye.jwt.new-token.signature-algorithm=
# 验签↓
mp.jwt.verify.publickey.location=jwt/publicKey.pem
mp.jwt.verify.issuer=${smallrye.jwt.new-token.issuer}
mp.jwt.verify.sub=${smallrye.jwt.claims.sub}
# native打包时，将文件打入原生可执行文件中
quarkus.native.resources.includes=${smallrye.jwt.sign.key.location}, ${mp.jwt.verify.publickey.location}

# OpenAI
quarkus.rest-client.openai-api.url=https://api.openai.com
# API Key - https://platform.openai.com/overview
quarkus.rest-client.openai-api.headers.Authorization=Bearer sk-xxx
quarkus.rest-client.openai-api.connect-timeout=60000
quarkus.rest-client.openai-api.verify-host=false
# 代理配置
#quarkus.rest-client.openai-api.proxy-address=host:port
#quarkus.rest-client.openai-api.proxy-user=user
#quarkus.rest-client.openai-api.proxy-password=password
